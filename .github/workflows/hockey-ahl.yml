name: 'AHL Deployment'

on:
  push:
    paths:
    - 'ahl/**'
    branches:
    - main
  #pull_request:



jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Some check on branch
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "::set-output name=env_name::Production"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "::set-output name=env_name::Test"
          else
             echo "::set-output name=env_name::Features"
          fi         
          
      - name: Use variable setup in previous step
        run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"
  
    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}

  terraform:
    needs: [build]
    name: 'Terraform-deploy'
    runs-on: ubuntu-latest
    #environment: dev
    #environment: ${{ github.head_ref }}
    #environment: ${{ github.ref }}
    #environment: ${{ env.GITHUB_REF_NAME }}
    #environment: ${GITHUB_REF_NAME}
    #${GITHUB_REF##*/}
    #${GITHUB_REF_NAME}
    environment: ${{ needs.build.outputs.env_name }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ahl
        #working-directory: ./hockey-ahl
    
    #if: github.ref == 'refs/heads/master'
    steps:
    #echo "::set-env name=ENVIRONMENT::main"  
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Some check on branch
      id: branch_check
      run: |
        echo "Running on branch ${{ github.ref }}"
        echo "::set-output name=env_name::${GITHUB_REF#refs/heads/}"
        
    - name: Use variable setup in previous step
      run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"
    # extract branch name
    #- name: Extract branch name
    #  #if: github.event_name != 'pull_request'
    #  shell: bash
    #  run: echo "::set-env name=BRANCH_NAME::$(echo ${GITHUB_REF#refs/heads/})"
    #  id: extract_branch

    #- name: Set Environment
    #  #if: endsWith(github.ref, '/develop')
    #  run: |
    #    echo "ENVIRONMENT=${GITHUB_REF#refs/heads/}"
    
    #- name: Print Environment
    #  #if: endsWith(github.ref, '/develop')
    #  run: |
    #    echo "${{ terraform.environment }}"

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TFCLOUD_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      #working-directory: ./terraform
      #run: terraform init -var="gcp_project_id=sports-analytics-dev" -var="gcp_region=us-central1" -var="tfcloud_organization=high5" -var="tfcloud_workspace=gcp-sports-analytics-ahl-dev"
      #run: terraform init -var-file="hockey-ahl.tfvars"
      run: terraform init -backend-config=backend.conf

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  #working-directory: ./terraform
    #  run: terraform fmt -check

    #- name: 'Terraform Plan'
    #  uses: hashicorp/terraform-github-actions@master
    #  with:
    #    #tf_actions_version: 0.12.13
    #    tf_actions_subcommand: 'plan'
    #    args: '-var="gcp_project_id=sports-analytics-dev" -var="gcp_region=us-central1" -var="tfcloud_organization=high5" -var="gcp-sports-analytics-ahl-dev"'

    # Generates an execution plan for Terraform
    #- name: Terraform Plan
    #  #working-directory: ./terraform
    #  run: terraform plan -var-file="hockey-ahl.tfvars"
    #  run: terraform plan -var="gcp_project_id=sports-analytics-dev" -var="gcp_region=us-central1" -var="tfcloud_organization=high5" -var="tfcloud_workspace=gcp-sports-analytics-ahl-dev"
    #  with:
    #      args: '-var="gcp_project_id=sports-analytics-dev" -var="gcp_region=us-central1" -var="tfcloud_organization=high5" -var="gcp-sports-analytics-ahl-dev"'

      #run: terraform plan -var-file="hockey-ahl.tfvars"
      #with:
      #  var_file: |
      #    hockey-ahl\hockey-ahl.tfvars

    # Auto Apply
    - name: Terraform Apply
    #  #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -var-file="hockey-ahl.tfvars"
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
